generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  room         String
  author       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastPlayedAt DateTime @default(now())

  inventory UserItem[]

  @@unique([room, author])
}

model UserItem {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  itemTypeId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int?
  durability Int?

  user         User              @relation(fields: [userId], references: [id])
  itemType     ItemType          @relation(fields: [itemTypeId], references: [id])
  enchantments ItemEnchantment[]

  @@unique([userId, itemTypeId])
}

model ItemEnchantment {
  id                String   @id @default(uuid()) @db.Uuid
  itemId            String   @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  enchantmentTypeId String   @db.Uuid

  item            UserItem        @relation(fields: [itemId], references: [id])
  enchantmentType EnchantmentType @relation(fields: [enchantmentTypeId], references: [id])
}

model EnchantmentType {
  id   String @id @default(uuid()) @db.Uuid
  name String

  instances ItemEnchantment[]
}

enum ItemCategory {
  EQUIPMENT
  CONSUMABLE
  MATERIAL
  TRADING
  HARDCODED
}

model ItemType {
  id         String       @id @default(uuid()) @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  category   ItemCategory
  stackable  Boolean
  durability Int?

  instances UserItem[]
}
